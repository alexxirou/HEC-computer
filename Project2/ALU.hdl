// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        Mux16(a=x, b=false, sel=zx, out=zx0); //if zx is 1 x=false=0
        Not16(in=zx0, out=notzx0); //!x after passing through zx check
        Mux16(a=zx0, b=notzx0, sel=nx, out=zxf); //if nx is 1 x is negated
        Mux16(a=y, b=false, sel=zy, out=zy0); //if zy is 1 y=false=0
        Not16(in=zy0, out=notzy0);  //!y after passing through zy check
        Mux16(a=zy0, b=notzy0, sel=ny, out=zyf);  //if ny is 1 y is negated
        And16(a=zxf , b=zyf, out=xandy);   //And operation for x and y after passing zero and negation tests
        Add16(a=zxf, b=zyf, out=xplusy);  //Addition of x and y after passing zero and negaion tests
        Mux16(a=xandy, b=xplusy, sel=f, out=f0); //if f is 1 we add x and y if f is 0 we do and operation
        Not16(in=f0, out=nf0);//negated the result of previous operation
        Mux16(a=f0, b=nf0, sel=no, out=out, out[15]=cn, out[0..7]=outn, out[8..15]=outp);// if no is 1 output is negated. We take most significant bit to check if result is negative or positive
        Or8Way(in=outn, out=orn);// Check if all 0..7 bit are 0
        Or8Way(in=outp, out=orp);//Check if all 8..15 bit are 0. Only "positive" zero when all bits are zero (no zero with out[15] set to 1).
        Or(a=orn, b=orp, out=notzr);//check if all 0..15 bit are 0
        Not(in=notzr, out=zr);//negate the result of previous operation. if 1 0..14 bits of out are 0
        Mux(a=false, b=true, sel=cn, out=ng);//If out[15] is 1 out is negative number, if zero it is positive

      
}
